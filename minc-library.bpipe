BEASTMODEL_DIR="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2"
BEASTMODEL_NAME="mni_icbm152_t1_tal_nlin_sym_09c"
BEASTLIBRARY_DIR="/opt/quarantine/resources/BEaST_libraries/combined"

//Model which has a headmask, must correspond to the same space as MNIMODEL
CUTNECKMODEL="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t1_tal_nlin_sym_09c"

//Model which has a facemask, must correspond to the same space as MNIMODEL
DEFACEMODEL="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t1_tal_nlin_sym_09c"

//Specify target linear registration model here options are
//sym or asym
//t1, t2, or pd
//Models older than icbm_2009c are also available, see resources directory
//Choice of model affects MNI_register, cutneck, and deface
REGISTRATIONMODEL="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t1_tal_nlin_sym_09c.mnc"
//REGISTRATIONMODEL="/opt/quarantine/resources/mni_icbm152_nlin_asym_09c_minc2/mni_icbm152_t1_tal_nlin_asym_09c.mnc"
//REGISTRATIONMODEL="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t2_tal_nlin_sym_09c.mnc"
//REGISTRATIONMODEL="/opt/quarantine/resources/mni_icbm152_nlin_asym_09c_minc2/mni_icbm152_t2_tal_nlin_asym_09c.mnc"

//Mask for masked registration
REGISTRATIONBRAINMASK="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t1_tal_nlin_sym_09c_mask.mnc"
REGISTRATIONHEADMASK="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t1_tal_nlin_sym_09c_headmask.mnc"

//Model to normalize intensity against
//NORMALIZEMODEL="/path/to/model.mnc"

//Tagfile for VBM statistics
VBMTAGDIR="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2"
VBMTAGFILE="mni_icbm152_t1_tal_nlin_sym_09c_ntags_1000_prob_90_nobg.tag"
VBMBGTAGFILE="mni_icbm152_t1_tal_nlin_sym_09c_ntags_1000_bg.tag"


mincconvert = {
    branch.name = "${branch.name}.mincconvert"
    //Runs mincconvert to make minc2 files
    //minc2 files are requied for some stages
    //This should be run first if files are minc1
    //Requires minc-toolkit
    exec """
    mincconvert -2 -clobber -compress 9 $input.mnc $output.mnc
    """
}

n3correct = {
    branch.name = "${branch.name}.n3correct"
    //Runs the nu_correct (aka n3correct) command with optimal settings according to
    //http://www.ncbi.nlm.nih.gov/pubmed/19559796
    //Requires minc-toolkit
    exec "nu_correct -verbose -clobber -iter 200 -shrink 2 -stop 0.000001 -fwhm 0.05 -distance 30 $input.mnc $output.mnc"
}

nlm_denoise = {
    branch.name = "${branch.name}.nlm_denoise"
    //Runs non-local-means filter on data
    //http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4359947
    //Requires minc-toolkit
    exec "volume_denoise.pl $input.mnc $output.mnc --verbose --clobber"
}

anlm_denoise = {
    branch.name = "${branch.name}.anlm_denoise"
    //Runs the "improved" adaptive non local means filter
    //http://onlinelibrary.wiley.com/doi/10.1002/jmri.22003/full
    //Requires minc-toolkit
    exec "minc_anlm --rician --verbose $input.mnc $output.mnc"
}

n4correct = {
    branch.name = "${branch.name}.n4correct"
    //Runs the improved n3correct aka N4correct
    //http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5445030
    //Requires ANTs as it uses ANTs/ITK's implementation, as minc-toolkit's is buggy
    //ANTs must be loaded after minc-toolkit to override the minc-toolkit version
    exec "N4BiasFieldCorrection -d 3 -r -b [200] -c [200x200x200x200,0.0] -i $input.mnc -o $output.mnc"
}

dumb_normalize = {
    //Performs a dumb normalization of the data, throwing away top and bottom 1%
    //Data is then scaled 0-65535 and stored in a sensible unsigned int format
    //Requires minc-toolkit
    exec """
    minccalc -2 -short -unsigned -clobber -expression "A[0]<(0.01*\$(mincstats -quiet -max $input.mnc)) || A[0]>(0.99*\$(mincstats -quiet -max $input.mnc)) ? 0 : A[0]" $input.mnc $output.tmp
    """
    exec """
    minccalc -2 -short -unsigned -clobber -expression "A[0]/\$(mincstats -quiet -max $output.tmp)*65535" $output.tmp $output.mnc
    """
}

nuyl_normalize = {
    //Performs histogram landmark normalization to a model using minc_nuyl
    //Requires NORMALIZEMODEL to be set to a reference mnc (atlas perhaps?)
    //See http://www.ncbi.nlm.nih.gov/pubmed/10784285
    exec """
    minc_nuyl --verbose --fix_zero_padding $input.mnc ${NORMALIZEMODEL} $output.mnc
    """
}

pol_normalize = {
    //Performs normalization against a model using volume_pol
    //Requires NORMALIZEMODEL to be set to a reference mnc (atlas perhaps?)
    //
    exec """
    volume_pol --verbose --clobber --order 1 --min 0 --max 65535 $input.mnc ${NORMALIZEMODEL} $output.mnc
    """
}

inormalize = {
    //Performal normalization against a model using inormalize (normalize_mri)
}

cutneckapply = {
    //Applies the headmask to the model registered brain
    //Transforms the model headmask to native space
    //Applies the native headmask to the brain in native space
    //Order of these operations matter due to weird handling of output variables

    //Applies model mask to subject brain in model space
    exec """
    minccalc -2 -short -unsigned -clobber -expression A[0]*A[1] ${CUTNECKMODEL}_headmask.mnc $input.mnc $output.mnc
    """

    forward output.mnc

    //Transforms model mask to native space
    exec """
    mincresample -verbose -clobber -2 -short -unsigned -near -keep
    -like ${nativemnc}
    -transform $input.xfm
    ${CUTNECKMODEL}_headmask.mnc ${output("${branch.name}.headmask.mnc")}
    """

    //Applies mask to subject brain in native space
    exec """
    minccalc -2 -short -unsigned -clobber -expression A[0]*A[1] ${output("${branch.name}.headmask.mnc")} ${nativemnc} ${output("${branch.name}.cutneckapply.mnc")}
    """
}

cutneckapplyautocrop = {
    //Alternative implementation of cutneck which applies via autocrop in native space
    //Applies model mask to subject brain in model space
    exec """
    minccalc -2 -short -unsigned -clobber -expression A[0]*A[1] ${CUTNECKMODEL}_headmask.mnc $input.mnc $output.mnc
    """

    forward output.mnc

    //Transforms model mask to native space
    exec """
    mincresample -verbose -clobber -2 -short -unsigned -near -keep
    -like ${nativemnc}
    -transform $input.xfm
    ${CUTNECKMODEL}_headmask.mnc ${output("${branch.name}.headmask.mnc")}
    """

    //Applies mask to subject brain in native space
    exec """
    autocrop -clobber -short -bbox ${output("${branch.name}.headmask.mnc")} -isoexpand 5 ${nativemnc} ${output("${branch.name}.cutneckapplyautocrop.mnc")}
    """
}

rigid_register = {
    //Rigidly registers brain to a given model
    //Not used in the registration chain anymore
    //May be used for other purposes
    //Requires minc-toolkit
    branch.nativemnc = "$input.mnc"
    exec """
    ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1
    mincANTS 3 -m MI[$input.mnc,${REGISTRATIONMODEL},1,32]
     -i 0
     -o $output.xfm
     --number-of-affine-iterations 10000x10000x10000x10000x10000
     --MI-option 32x32000
     --use-Histogram-Matching
     --do-rigid true
     --affine-gradient-descent-option 0.5x0.95x1.e-4x1.e-4
    """
}

rough_register = {
    //Roughly registers brain to a given model
    //Requires minc-toolkit
    branch.nativemnc = "$input.mnc"
    exec """
    ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1
    mincANTS 3 -m MI[${REGISTRATIONMODEL},$input.mnc,1,32]
     -i 0
     -o $output.xfm
     --number-of-affine-iterations 10000x10000x10000x10000x10000
     --MI-option 32x32000
     --use-Histogram-Matching
     --affine-gradient-descent-option 0.5x0.95x1.e-4x1.e-4
    """
}

affine_register = {
    //Affinely registers brain to a given model
    //Uses rough transformation passed from previous stage
    //Uses head mask for model
    //Mask must be in "fixed" space, so this registrion must be setup backwards
    //Requires minc-toolkit
    exec """
    ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1
    mincANTS 3 -m MI[${REGISTRATIONMODEL},$input.mnc,1,32]
     -i 0
     -x ${REGISTRATIONHEADMASK}
     -o $output.xfm
     --number-of-affine-iterations 10000x10000x10000x10000x10000
     --MI-option 32x32000
     --use-Histogram-Matching
     --affine-gradient-descent-option 0.5x0.95x1.e-4x1.e-4
     --initial-affine $input.xfm
    """
}

affine_register_masked = {
    //Affinely registers brain to a given model
    //Transforms brain to model space
    //Uses affine regstration passed from previous stage
    //Uses brain mask for model
    //Mask must be in "fixed" space, so this registration must be setup backwards
    //Requires minc-toolkit
    exec """
    ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1
    mincANTS 3 -m MI[${REGISTRATIONMODEL},$input.mnc,1,64]
     -i 0
     -x ${REGISTRATIONBRAINMASK}
     -o $output.xfm
     --number-of-affine-iterations 10000x10000x10000x10000x10000
     --MI-option 64x64000
     --use-Histogram-Matching
     --initial-affine $input.xfm
    """

    exec """
    mincresample -verbose -clobber -2 -short -unsigned -sinc
    -like ${REGISTRATIONMODEL}
    -transform ${output.xfm.prefix}_inverse.xfm
    $input.mnc $output.mnc
    """
}

nonlinear_register = {
    //Nonlinearly registers brain to a given model
    //Transforms brain to model space
    //Uses affine regstration passed from previous stage
    //Uses brain mask for model
    //Mask must be in "fixed" space, so this registration must be setup backwards
    //Requires minc-toolkit
    BASENAME="$output.mnc.prefix"
    exec """
    ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=8
    mincANTS 3 -m CC[$input.mnc,${REGISTRATIONMODEL},1,4]
     -r Gauss[3,0]
     -t SyN[0.5]
     -i 100x100x100x20
     -o $output.xfm
     --use-Histogram-Matching
     --continue-affine false
    """

    exec """
    mincresample -verbose -clobber -2 -short -unsigned -sinc
    -like ${REGISTRATIONMODEL}
    -transform $output.xfm
    $input.mnc $output.mnc
    """

    forward output.mnc

    exec """
    mincresample -verbose -clobber -2 -short -unsigned -near -keep
    -like ${REGISTRATIONMODEL}
    -transform ${output.xfm}
    ${REGISTRATIONBRAINMASK} ${output("${BASENAME}.nonlinmask.mnc")}
    """

    exec """
    mincmorph -clobber -verbose -byte -successive DDDDD ${BASENAME}.nonlinmask.mnc ${output("${BASENAME}.nonlinmask.dilation.mnc")}
    """

    branch.nonlinmnc = "${BASENAME}"
}

beastnormalize = {
    //Linearly scales the intensities to the range [0;100] using 0.1%-99.9%
    //of the voxels in the intensity histogram
    //No registration or n3 since this is done in prior steps
    branch.modelmnc = "$input.mnc.prefix"
    exec "beast_normalize $input.mnc $output.mnc ~/dummy.xfm -non3 -noreg -modeldir ${BEASTMODEL_DIR} -modelname ${BEASTMODEL_NAME}"
}

beastmask = {
    //Generates a brain mask for subject brain in model space
    uses(GB:9) {
    exec "mincbeast -clobber -verbose -fill -median -same_res -flip -conf ${BEASTLIBRARY_DIR}/default.1mm.conf ${BEASTLIBRARY_DIR} $input.mnc $output.mnc"
    }
}

beastextract = {
    //Applies the mask from beastmask to the original input file to extract the brain

    //Apply brain mask to original registered brain
    exec """
    minccalc -2 -short -unsigned -verbose -clobber -expression A[0]*A[1] $input.mnc ${branch.modelmnc}.mnc ${output("${branch.modelmnc}.beastextract.mnc")}
    """

    forward input.mnc

    //Transform brain mask to native space
    exec """
    mincresample -verbose -clobber -2 -short -unsigned -near -keep
    -like ${nativemnc}
    -transform $input.xfm
    $input.mnc ${output("${branch.name}.beastmask.mnc")}
    """

    //Apply brain mask to subject brain in native space
    exec """
    minccalc -2 -short -unsigned -verbose -clobber -expression A[0]*A[1] ${nativemnc}  ${output("${branch.name}.beastmask.mnc")} ${output("${branch.name}.beastextract.mnc")}
    """
}

classify_clean = {
    //Classifies brain matter into white/gray/csf
    //Requires registered brain and mask
    //Requires minc-toolkit
    exec """
    classify_clean -clobber
    -tagdir ${VBMTAGDIR}
    -tagfile ${VBMTAGFILE}
    -bgtagfile ${VBMBGTAGFILE}
    -mask ${branch.nonlinmnc}.nonlinmask.dilation.mnc
    -mask_source -clean_tags -clobber
    $input.mnc $output.mnc
    """
}

extractvbm = {
    //Extracts white/grey/csf from classified brain
    //Requires minc-toolkit
    BASENAME="$output.mnc.prefix"

    multi   "smooth_mask -clobber -binvalue 1 -fwhm 2 ${input.mnc} ${output("${BASENAME}.2mm.csf.mnc")}",
            "smooth_mask -clobber -binvalue 2 -fwhm 2 ${input.mnc} ${output("${BASENAME}.2mm.gm.mnc")}",
            "smooth_mask -clobber -binvalue 3 -fwhm 2 ${input.mnc} ${output("${BASENAME}.2mm.wm.mnc")}",
            "smooth_mask -clobber -binvalue 1 -fwhm 4 ${input.mnc} ${output("${BASENAME}.4mm.csf.mnc")}",
            "smooth_mask -clobber -binvalue 2 -fwhm 4 ${input.mnc} ${output("${BASENAME}.4mm.gm.mnc")}",
            "smooth_mask -clobber -binvalue 3 -fwhm 4 ${input.mnc} ${output("${BASENAME}.4mm.wm.mnc")}",
            "smooth_mask -clobber -binvalue 1 -fwhm 6 ${input.mnc} ${output("${BASENAME}.6mm.csf.mnc")}",
            "smooth_mask -clobber -binvalue 2 -fwhm 6 ${input.mnc} ${output("${BASENAME}.6mm.gm.mnc")}",
            "smooth_mask -clobber -binvalue 3 -fwhm 6 ${input.mnc} ${output("${BASENAME}.6mm.wm.mnc")}"
    exec    "mincblob -clobber -determinant ${branch.nonlinmnc}_inverse_grid_0.mnc ${branch.nonlinmnc}_inverse_grid_determinant.mnc"
    exec    "mincresample -clobber -like ${input.mnc} ${branch.nonlinmnc}_inverse_grid_determinant.mnc ${branch.nonlinmnc}_inverse_grid_determinant_resampled.mnc"
    multi   "mincblur -clobber -verbose -fwhm 2 ${branch.nonlinmnc}_inverse_grid_determinant_resampled.mnc ${BASENAME}.2mm.det",
            "mincblur -clobber -verbose -fwhm 4 ${branch.nonlinmnc}_inverse_grid_determinant_resampled.mnc ${BASENAME}.4mm.det",
            "mincblur -clobber -verbose -fwhm 6 ${branch.nonlinmnc}_inverse_grid_determinant_resampled.mnc ${BASENAME}.6mm.det"
    multi   "minccalc -clobber -verbose  -expression '(A[0]+1) * A[1]' ${BASENAME}.2mm.det_blur.mnc ${BASENAME}.2mm.csf.mnc ${output("${BASENAME}.2mm.modulated.csf.mnc")}",
            "minccalc -clobber -verbose  -expression '(A[0]+1) * A[1]' ${BASENAME}.2mm.det_blur.mnc ${BASENAME}.2mm.gm.mnc ${output("${BASENAME}.2mm.modulated.gm.mnc")}",
            "minccalc -clobber -verbose  -expression '(A[0]+1) * A[1]' ${BASENAME}.2mm.det_blur.mnc ${BASENAME}.2mm.wm.mnc ${output("${BASENAME}.2mm.modulated.wm.mnc")}",
            "minccalc -clobber -verbose  -expression '(A[0]+1) * A[1]' ${BASENAME}.4mm.det_blur.mnc ${BASENAME}.4mm.csf.mnc ${output("${BASENAME}.4mm.modulated.csf.mnc")}",
            "minccalc -clobber -verbose  -expression '(A[0]+1) * A[1]' ${BASENAME}.4mm.det_blur.mnc ${BASENAME}.4mm.gm.mnc ${output("${BASENAME}.4mm.modulated.gm.mnc")}",
            "minccalc -clobber -verbose  -expression '(A[0]+1) * A[1]' ${BASENAME}.4mm.det_blur.mnc ${BASENAME}.4mm.wm.mnc ${output("${BASENAME}.4mm.modulated.wm.mnc")}",
            "minccalc -clobber -verbose  -expression '(A[0]+1) * A[1]' ${BASENAME}.6mm.det_blur.mnc ${BASENAME}.6mm.csf.mnc ${output("${BASENAME}.6mm.modulated.csf.mnc")}",
            "minccalc -clobber -verbose  -expression '(A[0]+1) * A[1]' ${BASENAME}.6mm.det_blur.mnc ${BASENAME}.6mm.gm.mnc ${output("${BASENAME}.6mm.modulated.gm.mnc")}",
            "minccalc -clobber -verbose  -expression '(A[0]+1) * A[1]' ${BASENAME}.6mm.det_blur.mnc ${BASENAME}.6mm.wm.mnc ${output("${BASENAME}.6mm.modulated.wm.mnc")}"
    multi   "minccalc -clobber -verbose  -expression 'log(A[0]+1) * A[1]' ${BASENAME}.2mm.det_blur.mnc ${BASENAME}.2mm.csf.mnc ${output("${BASENAME}.2mm.modulated.log.csf.mnc")}",
            "minccalc -clobber -verbose  -expression 'log(A[0]+1) * A[1]' ${BASENAME}.2mm.det_blur.mnc ${BASENAME}.2mm.gm.mnc ${output("${BASENAME}.2mm.modulated.log.gm.mnc")}",
            "minccalc -clobber -verbose  -expression 'log(A[0]+1) * A[1]' ${BASENAME}.2mm.det_blur.mnc ${BASENAME}.2mm.wm.mnc ${output("${BASENAME}.2mm.modulated.log.wm.mnc")}",
            "minccalc -clobber -verbose  -expression 'log(A[0]+1) * A[1]' ${BASENAME}.4mm.det_blur.mnc ${BASENAME}.4mm.csf.mnc ${output("${BASENAME}.4mm.modulated.log.csf.mnc")}",
            "minccalc -clobber -verbose  -expression 'log(A[0]+1) * A[1]' ${BASENAME}.4mm.det_blur.mnc ${BASENAME}.4mm.gm.mnc ${output("${BASENAME}.4mm.modulated.log.gm.mnc")}",
            "minccalc -clobber -verbose  -expression 'log(A[0]+1) * A[1]' ${BASENAME}.4mm.det_blur.mnc ${BASENAME}.4mm.wm.mnc ${output("${BASENAME}.4mm.modulated.log.wm.mnc")}",
            "minccalc -clobber -verbose  -expression 'log(A[0]+1) * A[1]' ${BASENAME}.6mm.det_blur.mnc ${BASENAME}.6mm.csf.mnc ${output("${BASENAME}.6mm.modulated.log.csf.mnc")}",
            "minccalc -clobber -verbose  -expression 'log(A[0]+1) * A[1]' ${BASENAME}.6mm.det_blur.mnc ${BASENAME}.6mm.gm.mnc ${output("${BASENAME}.6mm.modulated.log.gm.mnc")}",
            "minccalc -clobber -verbose  -expression 'log(A[0]+1) * A[1]' ${BASENAME}.6mm.det_blur.mnc ${BASENAME}.6mm.wm.mnc ${output("${BASENAME}.6mm.modulated.log.wm.mnc")}"
}


linear_register = segment {
    //Multi-stage registration to a model
    rough_register + affine_register + affine_register_masked
}

beast = segment {
    //Runs the beast brain extraction toolchain
    //Requires models defined in $BEASTMODEL_DIR, $BEASTMODEL_NAME and a library in $BEASTLIBRARY_DIR
    //Requires minc-toolkit
    //Now registers the brain to MNI space first using mincANTS
    //http://www.ncbi.nlm.nih.gov/pubmed/21945694
    linear_register + beastnormalize + beastmask + beastextract
}

VBM = segment {
    beast + classify_clean + extractvbm
}

defaceapply = {
    //Applies the inverse face mask to the MRI volume
    //Expects the brain to be in MNI space
    exec """
    minccalc -2 -short -unsigned -verbose -clobber -expression 'A[0]*(1 - A[1])' $input.mnc ${DEFACEMODEL}_face_mask_res.mnc $output.mnc
    """

    exec """
    mincresample -verbose -clobber -2 -short -unsigned -near -keep
    -like ${nativemnc}
    -transform $input.xfm
    ${DEFACEMODEL}_face_mask_res.mnc ${output("${branch.name}.facemask.mnc")}
    """

    exec """
    minccalc -2 -short -unsigned -verbose -clobber -expression 'A[0]*(1 - A[1])' ${nativemnc} ${output("${branch.name}.facemask.mnc")} ${output("${branch.name}.defaceapply.mnc")}
    """
}

deface = segment {
    //Linear registers brain to MNI space
    //Applies inverse facemask to MRI data
    linear_register + defaceapply
}

cutneck = segment {
    //Linearly registers brain to MNI space
    //Applies neckmask to MRI data
    linear_register + cutneckapply
}

resample = {
    //Resamples minc volumes to unsigned shorts (16bit)
    //Many buggy programs generate 32 or 64bit float minc volumes, these files
    //are much larger, have numerical noise, and take longer to process
    //This step should be run last
    //NOTE: if using normalization to a model for registration the model
    //should also be resampled
    //Requires minc-tookit
    exec """
    mincresample -verbose -clobber -2 -short -unsigned $input.mnc $output.mnc
    """
}

preprocess = segment {
	//Default best-practices preprocessing pipeline to run on all data
	//is denoise + n3 or n4 + normalize + beast or cutneck + resample
	anlm_denoise + n4correct
}
