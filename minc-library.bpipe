BEASTMODEL_DIR="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2"
BEASTMODEL_NAME="mni_icbm152_t1_tal_nlin_sym_09c"
BEASTLIBRARY_DIR="/opt/quarantine/resources/BEaST_libraries/combined"

//Model which has a headmask, must correspond to the same space as MNIMODEL
CUTNECKMODEL="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t1_tal_nlin_sym_09c"

//Model which has a facemask, must correspond to the same space as MNIMODEL
DEFACEMODEL="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t1_tal_nlin_sym_09c"

//Specify target linear registration model here options are
//sym or asym
//t1, t2, or pd
//Models older than icbm_2009c are also available, see resources directory
//Choice of model affects MNI_register, cutneck, and deface
REGISTRATIONMODEL="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t1_tal_nlin_sym_09c.mnc"
//REGISTRATIONMODEL="/opt/quarantine/resources/mni_icbm152_nlin_asym_09c_minc2/mni_icbm152_t1_tal_nlin_asym_09c.mnc"
//REGISTRATIONMODEL="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t2_tal_nlin_sym_09c.mnc"
//REGISTRATIONMODEL="/opt/quarantine/resources/mni_icbm152_nlin_asym_09c_minc2/mni_icbm152_t2_tal_nlin_asym_09c.mnc"

//Optional second registration model for two-model registration
//ADNI MNI MODEL
REGISTRATIONMODEL2="/opt/quarantine/resources/mni_adni/mni_adni_t1w_tal_nlin_asym.mnc"
//PEDIATRIC MNI MODEL
//REGISTRATIONMODEL2="/opt/quarantine/resources/nihpd_sym_all_minc2/nihpd_sym_04.5-18.5_t1w.mnc"

//Mask for masked registration
REGISTRATIONBRAINMASK="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t1_tal_nlin_sym_09c_mask.mnc"
REGISTRATIONHEADMASK="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_t1_tal_nlin_sym_09c_headmask.mnc"

//Mask of white matter for N4 improvement
REGISTRATIONWMMASK="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_wm_tal_nlin_sym_09c.mnc"
REGISTRATIONGMMASK="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2/mni_icbm152_gm_tal_nlin_sym_09c.mnc"

//Model to normalize intensity against
//NORMALIZEMODEL="/path/to/model.mnc"

//Tagfile for VBM statistics
VBMTAGDIR="/opt/quarantine/resources/mni_icbm152_nlin_sym_09c_minc2"
VBMTAGFILE="mni_icbm152_t1_tal_nlin_sym_09c_ntags_1000_prob_90_nobg.tag"
VBMBGTAGFILE="mni_icbm152_t1_tal_nlin_sym_09c_ntags_1000_bg.tag"


mincconvert = {
    branch.name = "${branch.name}.mincconvert"
    //Runs mincconvert to make minc2 files
    //minc2 files are requied for some stages
    //This should be run first if files are minc1
    //Requires minc-toolkit
    exec """
    mincconvert -2 -clobber -compress 9 $input.mnc $output.mnc
    """
}

n3correct = {
    branch.name = "${branch.name}.n3correct"
    //Runs the nu_correct (aka n3correct) command with optimal settings according to
    //http://www.ncbi.nlm.nih.gov/pubmed/19559796
    //Requires minc-toolkit
    exec "nu_correct -verbose -clobber -iter 200 -shrink 2 -stop 0.000001 -fwhm 0.05 -distance 30 $input.mnc $output.mnc"
}

nlm_denoise = {
    branch.name = "${branch.name}.nlm_denoise"
    //Runs non-local-means filter on data
    //http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4359947
    //This is probably only valid for very noise 3T, or most 1.5T data
    //Requires minc-toolkit
    exec "volume_denoise.pl $input.mnc $output.mnc --verbose --clobber"
}

anlm_denoise = {
    branch.name = "${branch.name}.anlm_denoise"
    //Runs the "improved" adaptive non local means filter
    //http://onlinelibrary.wiley.com/doi/10.1002/jmri.22003/full
    //This is probably only valid for very noise 3T, or most 1.5T data
    //Requires minc-toolkit
    exec "minc_anlm --rician --verbose $input.mnc $output.mnc"
}

n4correct = {
    branch.name = "${branch.name}.n4correct"
    //Runs the improved n3correct aka N4correct
    //http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5445030
    //Correction is done with a mask as per http://dx.doi.org/10.1016/j.neuroimage.2007.10.026
    //Big mess of steps here
    //Winzorise intensity
    //Otsu mask, defrag, close the mask
    //Apply the mask to remove all background
    //Bestlinreg to mni space, use the MNI brain mask
    //Run N4 with the brain mask as a weighting and the otsu mask to rescale intensities at the end
    uses(GB:1.75) {
    exec """
    tmpdir=`mktemp -d` &&
    minccalc -expression 'A[0]?1:1' $input.mnc \$tmpdir/mask.mnc &&
    N4BiasFieldCorrection -d 3 --verbose -r 1 -w \$tmpdir/mask.mnc -x \$tmpdir/mask.mnc -b [200] -c [200x200x200x200,0.0] -i $input.mnc -o \$tmpdir/correct1.mnc &&
    bestlinreg_g -nmi -lsq12 -source_mask ${REGISTRATIONBRAINMASK} ${REGISTRATIONMODEL} \$tmpdir/correct1.mnc \$tmpdir/0.xfm &&
    itk_resample --order 3 --like \$tmpdir/correct1.mnc --transform \$tmpdir/0.xfm ${REGISTRATIONWMMASK} \$tmpdir/wm.mnc &&
    itk_resample --order 3 --like \$tmpdir/correct1.mnc --transform \$tmpdir/0.xfm ${REGISTRATIONGMMASK} \$tmpdir/gm.mnc &&
    minccalc -expression 'A[0]>0.1||A[1]>0.1?1:0' \$tmpdir/wm.mnc \$tmpdir/gm.mnc \$tmpdir/combined.mnc &&
    N4BiasFieldCorrection -d 3 --verbose -r 0 -w \$tmpdir/combined.mnc -x \$tmpdir/mask.mnc -b [200] -c [200x200x200x200,0.0] -i \$tmpdir/correct1.mnc -o $output.mnc &&
    rm -r \$tmpdir
    ""","n4correct"
    }
}

n4correctsimple = {
    branch.name = "${branch.name}.n4correctsimple"
    //Runs the improved n3correct aka N4correct
    //http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5445030
    //Requires ANTs as it uses ANTs/ITK's implementation, as minc-toolkit's is buggy
    //ANTs must be loaded after minc-toolkit to override the minc-toolkit version
    //Simple n4 done without a mask for when bestlinreg in n4correct fails badly
    exec """
    N4BiasFieldCorrection -d 3 -b [200] -c [200x200x200x200,0.0] -i $input.mnc -o $output.mnc
    """
}


dumb_normalize = {
    //Performs a dumb normalization of the data, throwing away top and bottom 1%
    //Data is then scaled 0-65535 and stored in a sensible unsigned int format
    //Requires minc-toolkit
    exec """
    minccalc -2 -short -unsigned -clobber -expression "A[0]<(0.01*\$(mincstats -quiet -max $input.mnc)) || A[0]>(0.99*\$(mincstats -quiet -max $input.mnc)) ? 0 : A[0]" $input.mnc $output.tmp
    """
    exec """
    minccalc -2 -short -unsigned -clobber -expression "A[0]/\$(mincstats -quiet -max $output.tmp)*65535" $output.tmp $output.mnc
    """
}

nuyl_normalize = {
    //Performs histogram landmark normalization to a model using minc_nuyl
    //Requires NORMALIZEMODEL to be set to a reference mnc (atlas perhaps?)
    //See http://www.ncbi.nlm.nih.gov/pubmed/10784285
    exec """
    minc_nuyl --verbose --fix_zero_padding $input.mnc ${NORMALIZEMODEL} $output.mnc
    """
}

pol_normalize = {
    //Performs normalization against a model using volume_pol
    //Requires NORMALIZEMODEL to be set to a reference mnc (atlas perhaps?)
    //
    exec """
    volume_pol --verbose --clobber --order 1 --min 0 --max 65535 $input.mnc ${NORMALIZEMODEL} $output.mnc
    """
}

inormalize = {
    //Performal normalization against a model using inormalize (normalize_mri)
}


cutneckapplyautocrop = {
    //Alternative implementation of cutneck which applies via autocrop in native space
    //Applies model mask to subject brain in model space
    exec """
    minccalc -2 -short -unsigned -clobber -expression A[0]*A[1] ${CUTNECKMODEL}_headmask_D.mnc $input.mnc $output.mnc
    """

    forward output.mnc

    //Transforms model mask to native space
    exec """
    itk_resample --clobber --labels --byte
    --like ${nativemnc}
    --transform $input.xfm
    ${CUTNECKMODEL}_headmask_D.mnc ${output("${branch.name}.headmask.mnc")}
    """

    //Transoforms a pseudo-headmask to native space for TIV
    exec """
    itk_resample --clobber --labels --byte
    --like ${nativemnc}
    --transform $input.xfm
    ${REGISTRATIONBRAINMASK} ${output("${branch.name}.TIV.mnc")}
    """

    exec """
    minccalc -2 -short -unsigned -clobber -expression A[0]*A[1] ${nativemnc} ${output("${branch.name}.headmask.mnc")} ${output("${branch.name}.cutneck.mnc")}
    """

    //Applies calculates bounding box from data
    exec """
    autocrop -clobber -bbox ${output("${branch.name}.headmask.mnc")} ${output("${branch.name}.cutneck.mnc")} ${output("${branch.name}.cutneckapplyautocrop.mnc")}
    """
    branch.nativemnc = "${branch.name}.cutneckapplyautocrop.mnc"
    branch.name = "${branch.name}.cutneckapplyautocrop"
}

rigid_register = {
    //Rigidly registers brain to a given model
    //Not used in the registration chain anymore
    //May be used for other purposes
    //Requires minc-toolkit
    branch.nativemnc = "$input.mnc"
    exec """
    ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1
    mincANTS 3 -m MI[$input.mnc,${REGISTRATIONMODEL},1,32]
     -i 0
     -o $output.xfm
     --number-of-affine-iterations 10000x10000x10000x10000x10000
     --MI-option 32x32000
     --use-Histogram-Matching
     --do-rigid true
     --affine-gradient-descent-option 0.5x0.95x1.e-4x1.e-4
    """
}

rough_register = {
    //Roughly registers brain to a given model
    //Requires minc-toolkit
    branch.nativemnc = "$input.mnc"
    exec """
    bestlinreg.pl -lsq12 ${REGISTRATIONMODEL} $input.mnc $output.xfm
    """
}

affine_register = {
    //Affinely registers brain to a given model
    //Uses rough transformation passed from previous stage
    //Uses head mask for model
    //Mask must be in "fixed" space, so this registrion must be setup backwards
    //Requires minc-toolkit
    exec """
    ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1
    mincANTS 3 -m MI[${REGISTRATIONMODEL},$input.mnc,1,32]
     -i 0
     -x ${REGISTRATIONHEADMASK}
     -o $output.xfm
     --number-of-affine-iterations 10000x10000x10000x10000x10000
     --MI-option 32x32000
     --use-Histogram-Matching
     --affine-gradient-descent-option 0.5x0.95x1.e-4x1.e-4
     --initial-affine $input.xfm
    """
}

affine_register_masked = {
    //Affinely registers brain to a given model
    //Transforms brain to model space
    //Uses affine regstration passed from previous stage
    //Uses brain mask for model
    //Mask must be in "fixed" space, so this registration must be setup backwards
    //Requires minc-toolkit
    exec """
    ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1
    mincANTS 3 -m MI[${REGISTRATIONMODEL},$input.mnc,1,64]
     -i 0
     -x ${REGISTRATIONBRAINMASK}
     -o $output.xfm
     --number-of-affine-iterations 10000x10000x10000x10000x10000
     --MI-option 64x64000
     --use-Histogram-Matching
     --initial-affine $input.xfm
    """

    exec """
    mincresample -verbose -clobber -2 -short -unsigned -sinc
    -like ${REGISTRATIONMODEL}
    -transform ${output.xfm.prefix}_inverse.xfm
    $input.mnc $output.mnc
    """
}

linear_antsRegistration = {
    //Multi-stage registration of input brain to model space
    branch.nativemnc = "$input.mnc"
    uses(GB:1.75) {
    exec """
    antsRegistration --dimensionality 3 --float 0 --collapse-output-transforms 1 --minc --write-composite-transform --verbose
    --output $output.xfm.prefix
    --winsorize-image-intensities [0.01,0.99] --use-histogram-matching 1
    --initial-moving-transform [${REGISTRATIONMODEL},$input.mnc,1]
    --transform Rigid[0.5] --metric Mattes[${REGISTRATIONMODEL},$input.mnc,1,32,Random,0.3] --convergence [2000x2000x2000x2000x0,1e-6,10] --shrink-factors 10x8x4x2x1 --smoothing-sigmas 4x3x2x1x0vox --masks [NULL,NULL]
    --transform Affine[0.1] --metric Mattes[${REGISTRATIONMODEL},$input.mnc,1,64] --convergence [2000x2000x2000x2000,1e-6,10] --shrink-factors 8x4x2x1 --smoothing-sigmas 4x2x1x0vox --masks [${REGISTRATIONBRAINMASK},NULL]
    """
    }

    exec """
    itk_resample --clobber --order 3 --short
    --like ${REGISTRATIONMODEL}
    --transform ${output.xfm.prefix}_inverse.xfm
    $input.mnc $output.mnc
    """
}

linear_bestlinreg = {
    //Two target bestlinreg
    branch.nativemnc = "$input.mnc"
    exec """
    bestlinreg_g -clobber -nmi -lsq12 -source_mask ${REGISTRATIONBRAINMASK} -sec_source ${REGISTRATIONMODEL2} ${REGISTRATIONMODEL} $input.mnc $output.xfm &&
    xfminvert $output.xfm ${output.xfm.prefix}_inverse.xfm
    """

    exec """
    itk_resample --clobber --order 3 --short
    --like ${REGISTRATIONMODEL}
    --transform ${output.xfm.prefix}_inverse.xfm
    $input.mnc $output.mnc
    """
}

linear_antsRegistration_twotarget = {
    //Multi-stage registration of input brain to model space with two targets
    branch.nativemnc = "$input.mnc"
    uses(GB:3) {
    exec """
    antsRegistration --dimensionality 3 --float 0 --collapse-output-transforms 1 --minc --write-composite-transform --verbose
    --output $output.xfm.prefix
    --winsorize-image-intensities [0.01,0.99] --use-histogram-matching 1
    --initial-moving-transform [${REGISTRATIONMODEL},$input.mnc,1]
    --transform Rigid[0.5]
    --metric Mattes[${REGISTRATIONMODEL},$input.mnc,1,32,Random,0.3]
    --metric Mattes[${REGISTRATIONMODEL2},$input.mnc,1,32,Random,0.3]
    --convergence [2000x2000x2000x2000x0,1e-6,10] --shrink-factors 10x8x4x2x1 --smoothing-sigmas 4x3x2x1x0vox --masks [NULL,NULL]
    --transform Affine[0.1]
    --metric Mattes[${REGISTRATIONMODEL},$input.mnc,1,64,Random,0.5]
    --metric Mattes[${REGISTRATIONMODEL2},$input.mnc,1,64,Random,0.5]
    --convergence [2000x2000x2000x2000,1e-6,10] --shrink-factors 8x4x2x1 --smoothing-sigmas 4x2x1x0vox --masks [${REGISTRATIONBRAINMASK},NULL]
    """
    }

    exec """
    itk_resample --clobber --order 3 --short
    --like ${REGISTRATIONMODEL}
    --transform ${output.xfm.prefix}_inverse.xfm
    $input.mnc $output.mnc
    """
}

resample_to_lsq6_space = {
    //Must be run as the last stage, resamples all the useful files (brains and masks) to lsq6 space with the target model
    output.dir="lsq6"

    //Clever descale command, extract the scale and shear values from lsq12 registration, invert, and apply to lsq12, result is a lsq6 which is pretty nice
    exec """
    tmpdir=`mktemp -d`;
    param2xfm \$(xfm2param ${input.xfm.prefix}_inverse.xfm | grep -E 'scale|shear') \$tmpdir/${branch.name}.scale.xfm;
    xfminvert \$tmpdir/${branch.name}.scale.xfm \$tmpdir/${branch.name}.unscale.xfm;
    xfmconcat ${input.xfm.prefix}_inverse.xfm \$tmpdir/${branch.name}.unscale.xfm ${output("${branch.name}.lsq6.xfm")}
    """
    exec """
    itk_resample --clobber --order 3 --short
    --like ${REGISTRATIONMODEL}
    --transform ${output("${branch.name}.lsq6.xfm")}
    ${branch.name}.mnc ${output("${branch.name}.lsq6.mnc")}
    """
    exec """
    itk_resample --clobber --labels --byte
    --like ${REGISTRATIONMODEL}
    --transform ${output("${branch.name}.lsq6.xfm")}
    ${branch.name}.beastmask.mnc ${output("${branch.name}.beastmask.lsq6.mnc")}
    """
}

beastnormalize = {
    //Linearly scales the intensities to the range [0;100] using 0.1%-99.9%
    //of the voxels in the intensity histogram
    //No registration or n3 since this is done in prior steps
    branch.modelmnc = "$input.mnc.prefix"
    exec """
         tmpdir=`mktemp -d`;
         minc_anlm $input.mnc \$tmpdir/${branch.name}.denoise.mnc &&
         volume_pol --order 1 --min 0 --max 100 --noclamp  \$tmpdir/${branch.name}.denoise.mnc ${REGISTRATIONMODEL} --source_mask ${REGISTRATIONBRAINMASK} --target_mask ${REGISTRATIONBRAINMASK} --clobber $output.mnc
         """
}

beastmask = {
    //Generates a brain mask for subject brain in model space
    uses(GB:9,threads:8) {
    exec "mincbeast -clobber -verbose -fill -median -same_res -flip -conf ${BEASTLIBRARY_DIR}/default.1mm.conf ${BEASTLIBRARY_DIR} $input.mnc $output.mnc"
    }
}

beastextract = {
    //Applies the mask from beastmask to the original input file to extract the brain

    //Apply brain mask to original registered brain
    exec """
    minccalc -2 -short -unsigned -verbose -clobber -expression A[0]*A[1] $input.mnc ${branch.modelmnc}.mnc ${output("${branch.modelmnc}.beastextract.mnc")}
    """

    forward input.mnc

    //Transform brain mask to native space
    exec """
    itk_resample --clobber --labels --byte
    --like ${nativemnc}
    --transform $input.xfm
    $input.mnc ${output("${branch.name}.beastmask.mnc")}
    """

    //Apply brain mask to subject brain in native space
    exec """
    minccalc -2 -short -unsigned -verbose -clobber -expression A[0]*A[1] ${nativemnc}  ${output("${branch.name}.beastmask.mnc")} ${output("${branch.name}.beastextract.mnc")}
    """

    //Generate a brainmatter mask for volume estimations
    exec """
    tmpdir=`mktemp -d` &&
    ThresholdImage 3 ${nativemnc} \$tmpdir/otsu.mnc Otsu 1 &&
    ImageMath 3 ${output("${branch.name}.brainvolume.mnc")} m \$tmpdir/otsu.mnc ${output("${branch.name}.beastmask.mnc")} &&
    rm -r \$tmpdir
    """

}

classify_clean = {
    //Classifies brain matter into white/gray/csf
    //Requires registered brain and mask
    //Requires minc-toolkit
    exec """
    classify_clean
    -tagdir ${VBMTAGDIR}
    -tagfile ${VBMTAGFILE}
    -bgtagfile ${VBMBGTAGFILE}
    -mask $input.mnc
    -mask_source -clean_tags -clobber
    ${branch.modelmnc}.mnc $output.mnc
    """
}

extractvbm = {
    //Extracts white/grey/csf from classified brain
    //Requires minc-toolkit
    multi   "smooth_mask -binvalue 1 -fwhm 10 ${input.mnc} $output.csf.mnc",
            "smooth_mask -binvalue 2 -fwhm 10 ${input.mnc} $output.gm.mnc",
            "smooth_mask -binvalue 3 -fwhm 10 ${input.mnc} $output.wm.mnc"
}

linear_register = segment {
    //Multi-stage registration to a model
    rough_register + affine_register + affine_register_masked
}

beast = segment {
    //Runs the beast brain extraction toolchain
    //Requires models defined in $BEASTMODEL_DIR, $BEASTMODEL_NAME and a library in $BEASTLIBRARY_DIR
    //Requires minc-toolkit
    //Now registers the brain to MNI space first using mincANTS
    //http://www.ncbi.nlm.nih.gov/pubmed/21945694
    beastnormalize + beastmask + beastextract
}

VBM = segment {
    beast + classify_clean + extractvbm
}

defaceapply = {
    //Applies the inverse face mask to the MRI volume
    //Expects the brain to be in MNI space
    exec """
    minccalc -2 -short -unsigned -verbose -clobber -expression 'A[0]*(1 - A[1])' $input.mnc ${DEFACEMODEL}_face_mask_res.mnc $output.mnc
    """

    exec """
    itk_resample --clobber --labels --byte
    --like ${nativemnc}
    --transform $input.xfm
    ${DEFACEMODEL}_face_mask_res.mnc ${output("${branch.name}.facemask.mnc")}
    """

    exec """
    minccalc -2 -short -unsigned -verbose -clobber -expression 'A[0]*(1 - A[1])' ${nativemnc} ${output("${branch.name}.facemask.mnc")} ${output("${branch.name}.defaceapply.mnc")}
    """
}

deface = segment {
    //Linear registers brain to MNI space
    //Applies inverse facemask to MRI data
    linear_register + defaceapply
}

cutneck = segment {
    //Linearly registers brain to MNI space
    //Applies neckmask to MRI data
    linear_register + cutneckapplyautocrop
}

resample = {
    //Resamples minc volumes to unsigned shorts (16bit)
    //Many buggy programs generate 32 or 64bit float minc volumes, these files
    //are much larger, have numerical noise, and take longer to process
    //This step should be run last
    //NOTE: if using normalization to a model for registration the model
    //should also be resampled
    //Requires minc-tookit
    exec """
    mincresample -verbose -clobber -2 -short -unsigned $input.mnc $output.mnc
    """
}

clean_and_center = {
    //Fixes a bunch of possible broken bits in MINC files
    //Requires minc-toolkit-extras
    branch.name = "${branch.name}.clean_and_center"
    exec """
    clean_and_center_minc.pl $input.mnc $output.mnc
    """
}

QC = {
    //Generates QC images
    output.dir="QC"
    exec """
  tmpdir=\$(mktemp -d) &&

  create_verify_image \$tmpdir/t.rgb
  -width 1920 -autocols 6 -autocol_planes t
  -row ${branch.modelmnc}.beastnormalize.mnc color:gray
  volume_overlay:$input.mnc:0.4:red &&

  create_verify_image \$tmpdir/s.rgb
  -width 1920 -autocols 6 -autocol_planes s
  -row ${branch.modelmnc}.beastnormalize.mnc color:gray
  volume_overlay:$input.mnc:0.4:red &&

  create_verify_image \$tmpdir/c.rgb
  -width 1920 -autocols 6 -autocol_planes c
  -row ${branch.modelmnc}.beastnormalize.mnc color:gray
  volume_overlay:$input.mnc:0.4:red &&

  convert -append \$tmpdir/*.rgb $output.jpg &&

  rm -r $tmpdir

    """

}

preprocess = segment {
	//Default best-practices preprocessing pipeline to run on all data
	clean_and_center + n4correct + linear_bestlinreg + cutneckapplyautocrop + beast + QC
}
